syntax = "proto2";

import "bgs/low/pb/client/account_types.proto";
import "bgs/low/pb/client/global_extensions/method_options.proto";
import "bgs/low/pb/client/global_extensions/service_options.proto";
import "bgs/low/pb/client/game_matchmaking_types.proto";
import "bgs/low/pb/client/rpc_types.proto";
package bgs.protocol.matchmaking.v1;

option java_package = "bnet.protocol.matchmaking.v1";
option java_outer_classname = "GameRequestServiceProto";
option optimize_for = CODE_SIZE;
option java_generic_services = true;

message QueueMatchmakingRequest {
  optional .bgs.protocol.matchmaking.v1.GameMatchmakingOptions options = 1;
}

message QueueMatchmakingResponse {
  optional .bgs.protocol.matchmaking.v1.RequestId request_id = 1;
}

message JoinGameRequest {
  optional .bgs.protocol.matchmaking.v1.GameHandle game_handle = 1;
  repeated .bgs.protocol.matchmaking.v1.Player player = 2;
}

message JoinGameResponse {
  optional .bgs.protocol.matchmaking.v1.RequestId request_id = 1;
}

message CancelMatchmakingRequest {
  optional .bgs.protocol.matchmaking.v1.RequestId request_id = 1;
  repeated .bgs.protocol.account.v1.GameAccountHandle game_account = 2;
}

message QueueWaitTimes {
  optional int32 min_wait = 1;
  optional int32 max_wait = 2;
  optional int32 avg_wait = 3;
  optional int32 std_dev_wait = 4;
}

message QueueEntryNotification {
  optional .bgs.protocol.matchmaking.v1.RequestId request_id = 1;
  optional .bgs.protocol.matchmaking.v1.QueueWaitTimes wait_times = 2;
  repeated .bgs.protocol.account.v1.GameAccountHandle member = 3;
  optional .bgs.protocol.account.v1.GameAccountHandle request_initiator = 4;
}

message QueueExitNotification {
  optional .bgs.protocol.matchmaking.v1.RequestId request_id = 1;
  optional .bgs.protocol.account.v1.GameAccountHandle cancel_initiator = 2;
}

message QueueLeftNotification {
  optional .bgs.protocol.matchmaking.v1.RequestId request_id = 1;
  repeated .bgs.protocol.account.v1.GameAccountHandle game_account = 2;
  optional .bgs.protocol.account.v1.GameAccountHandle cancel_initiator = 3;
}

message QueueUpdateNotification {
  optional .bgs.protocol.matchmaking.v1.RequestId request_id = 1;
  optional .bgs.protocol.matchmaking.v1.QueueWaitTimes wait_times = 2;
  optional bool is_matchmaking = 3;
}

message MatchmakingResultNotification {
  optional .bgs.protocol.matchmaking.v1.RequestId request_id = 1;
  optional uint32 result = 2;
  optional .bgs.protocol.matchmaking.v1.ConnectInfo connect_info = 3;
  optional .bgs.protocol.matchmaking.v1.GameHandle game_handle = 4;
}

service GameRequestService {
  option (.bgs.protocol.service_options) = {
    descriptor_name: "bnet.protocol.matchmaking.GameRequest"
  };
  option (.bgs.protocol.sdk_service_options) = {
    outbound: true
  };
  rpc QueueMatchmaking(.bgs.protocol.matchmaking.v1.QueueMatchmakingRequest) returns (.bgs.protocol.matchmaking.v1.QueueMatchmakingResponse) {
    option (.bgs.protocol.method_options) = {
      id: 1
    };
  }
  rpc JoinGame(.bgs.protocol.matchmaking.v1.JoinGameRequest) returns (.bgs.protocol.matchmaking.v1.JoinGameResponse) {
    option (.bgs.protocol.method_options) = {
      id: 2
    };
  }
  rpc CancelMatchmaking(.bgs.protocol.matchmaking.v1.CancelMatchmakingRequest) returns (.bgs.protocol.NoData) {
    option (.bgs.protocol.method_options) = {
      id: 3
    };
  }
}

service GameRequestListener {
  option (.bgs.protocol.service_options) = {
    descriptor_name: "bnet.protocol.matchmaking.GameRequestListener"
  };
  option (.bgs.protocol.sdk_service_options) = {
    inbound: true
  };
  rpc OnQueueEntry(.bgs.protocol.matchmaking.v1.QueueEntryNotification) returns (.bgs.protocol.NO_RESPONSE) {
    option (.bgs.protocol.method_options) = {
      id: 1
    };
  }
  rpc OnQueueExit(.bgs.protocol.matchmaking.v1.QueueExitNotification) returns (.bgs.protocol.NO_RESPONSE) {
    option (.bgs.protocol.method_options) = {
      id: 2
    };
  }
  rpc OnQueueLeft(.bgs.protocol.matchmaking.v1.QueueLeftNotification) returns (.bgs.protocol.NO_RESPONSE) {
    option (.bgs.protocol.method_options) = {
      id: 3
    };
  }
  rpc OnQueueUpdate(.bgs.protocol.matchmaking.v1.QueueUpdateNotification) returns (.bgs.protocol.NO_RESPONSE) {
    option (.bgs.protocol.method_options) = {
      id: 4
    };
  }
  rpc OnMatchmakingResult(.bgs.protocol.matchmaking.v1.MatchmakingResultNotification) returns (.bgs.protocol.NO_RESPONSE) {
    option (.bgs.protocol.method_options) = {
      id: 5
    };
  }
}


