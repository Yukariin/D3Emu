syntax = "proto2";

import "bgs/low/pb/client/attribute_types.proto";
import "bgs/low/pb/client/entity_types.proto";
import "bgs/low/pb/client/rpc_types.proto";
package bgs.protocol.challenge.v1;

option java_package = "bnet.protocol.challenge.v1";
option java_outer_classname = "ChallengeServiceProto";
option optimize_for = CODE_SIZE;
option cc_generic_services = false;
option java_generic_services = true;

message Challenge {
  required fixed32 type = 1;
  optional string info = 2;
  optional string answer = 3 [(.bgs.protocol.field_options) = {
    log: HIDDEN
  }];
  optional uint32 retries = 4;
}

message ChallengePickedRequest {
  required fixed32 challenge = 1;
  optional uint32 id = 2;
  optional bool new_challenge_protocol = 3 [default = false];
}

message ChallengePickedResponse {
  optional bytes data = 1 [(.bgs.protocol.field_options) = {
    log: HIDDEN
  }];
}

message ChallengeAnsweredRequest {
  required string answer = 1 [(.bgs.protocol.field_options) = {
    log: HIDDEN
  }];
  optional bytes data = 2 [(.bgs.protocol.field_options) = {
    log: HIDDEN
  }];
  optional uint32 id = 3;
}

message ChallengeAnsweredResponse {
  optional bytes data = 1 [(.bgs.protocol.field_options) = {
    log: HIDDEN
  }];
  optional bool do_retry = 2;
  optional bool record_not_found = 3;
}

message ChallengeCancelledRequest {
  optional uint32 id = 1;
}

message SendChallengeToUserRequest {
  optional .bgs.protocol.ProcessId peer_id = 1;
  optional .bgs.protocol.EntityId game_account_id = 2;
  repeated .bgs.protocol.challenge.v1.Challenge challenges = 3;
  required fixed32 context = 4;
  optional uint64 timeout = 5;
  repeated .bgs.protocol.Attribute attributes = 6;
  optional .bgs.protocol.ProcessId host = 7;
  optional .bgs.protocol.EntityId account_id = 8;
}

message SendChallengeToUserResponse {
  optional uint32 id = 1;
}

message ChallengeUserRequest {
  repeated .bgs.protocol.challenge.v1.Challenge challenges = 1;
  required fixed32 context = 2;
  optional uint32 id = 3;
  optional uint64 deadline = 4;
  repeated .bgs.protocol.Attribute attributes = 5;
  optional .bgs.protocol.EntityId game_account_id = 6;
}

message ChallengeResultRequest {
  optional uint32 id = 1;
  optional fixed32 type = 2;
  optional uint32 error_id = 3;
  optional bytes answer = 4 [(.bgs.protocol.field_options) = {
    log: HIDDEN
  }];
}

message ChallengeExternalRequest {
  optional string request_token = 1;
  optional string payload_type = 2;
  optional bytes payload = 3;
}

message ChallengeExternalResult {
  optional string request_token = 1;
  optional bool passed = 2 [default = true];
}

service ChallengeService {
  option (.bgs.protocol.service_options) = {
    descriptor_name: "bnet.protocol.challenge.ChallengeService"
  };
  option (.bgs.protocol.sdk_service_options) = {
    inbound: true
    outbound: true
  };
  rpc ChallengePicked(.bgs.protocol.challenge.v1.ChallengePickedRequest) returns (.bgs.protocol.challenge.v1.ChallengePickedResponse) {
    option (.bgs.protocol.method_options) = {
      id: 1
    };
  }
  rpc ChallengeAnswered(.bgs.protocol.challenge.v1.ChallengeAnsweredRequest) returns (.bgs.protocol.challenge.v1.ChallengeAnsweredResponse) {
    option (.bgs.protocol.method_options) = {
      id: 2
    };
  }
  rpc ChallengeCancelled(.bgs.protocol.challenge.v1.ChallengeCancelledRequest) returns (.bgs.protocol.NoData) {
    option (.bgs.protocol.method_options) = {
      id: 3
    };
  }
  rpc SendChallengeToUser(.bgs.protocol.challenge.v1.SendChallengeToUserRequest) returns (.bgs.protocol.challenge.v1.SendChallengeToUserResponse) {
    option (.bgs.protocol.method_options) = {
      id: 4
    };
  }
}

service ChallengeListener {
  option (.bgs.protocol.service_options) = {
    descriptor_name: "bnet.protocol.challenge.ChallengeNotify"
  };
  option (.bgs.protocol.sdk_service_options) = {
    inbound: true
  };
  rpc OnChallengeUser(.bgs.protocol.challenge.v1.ChallengeUserRequest) returns (.bgs.protocol.NO_RESPONSE) {
    option (.bgs.protocol.method_options) = {
      id: 1
    };
  }
  rpc OnChallengeResult(.bgs.protocol.challenge.v1.ChallengeResultRequest) returns (.bgs.protocol.NO_RESPONSE) {
    option (.bgs.protocol.method_options) = {
      id: 2
    };
  }
  rpc OnExternalChallenge(.bgs.protocol.challenge.v1.ChallengeExternalRequest) returns (.bgs.protocol.NO_RESPONSE) {
    option (.bgs.protocol.method_options) = {
      id: 3
    };
  }
  rpc OnExternalChallengeResult(.bgs.protocol.challenge.v1.ChallengeExternalResult) returns (.bgs.protocol.NO_RESPONSE) {
    option (.bgs.protocol.method_options) = {
      id: 4
    };
  }
}


